// Generated by generate/std

package main

type pkgNames struct {
	path  string
	names []string
}

var pkgs = [...]pkgNames{
	{
		path: "",
		names: []string{
			"error",
		},
	},
	{
		path: "io",
		names: []string{
			"ByteReader",
			"ByteScanner",
			"ByteWriter",
			"Closer",
			"ReadCloser",
			"ReadSeeker",
			"ReadWriteCloser",
			"ReadWriteSeeker",
			"ReadWriter",
			"Reader",
			"ReaderAt",
			"ReaderFrom",
			"RuneReader",
			"RuneScanner",
			"Seeker",
			"WriteCloser",
			"WriteSeeker",
			"Writer",
			"WriterAt",
			"WriterTo",
		},
	},
	{
		path: "os",
		names: []string{
			"FileInfo",
			"Signal",
		},
	},
	{
		path: "fmt",
		names: []string{
			"Formatter",
			"GoStringer",
			"ScanState",
			"Scanner",
			"State",
			"Stringer",
		},
	},
	{
		path: "log",
	},
	{
		path: "net",
		names: []string{
			"Addr",
			"Conn",
			"Error",
			"Listener",
			"PacketConn",
			"dnsConn",
			"dnsRR",
			"sockaddr",
		},
	},
	{
		path: "flag",
		names: []string{
			"Getter",
			"Value",
		},
	},
	{
		path: "hash",
		names: []string{
			"Hash",
			"Hash32",
			"Hash64",
		},
	},
	{
		path: "html",
	},
	{
		path: "math",
	},
	{
		path: "mime",
	},
	{
		path: "path",
	},
	{
		path: "sort",
		names: []string{
			"Interface",
		},
	},
	{
		path: "sync",
		names: []string{
			"Locker",
		},
	},
	{
		path: "time",
	},
	{
		path: "bufio",
		names: []string{
			"SplitFunc",
		},
	},
	{
		path: "bytes",
	},
	{
		path: "image",
		names: []string{
			"Image",
			"PalettedImage",
		},
	},
	{
		path: "crypto",
		names: []string{
			"Decrypter",
			"Signer",
			"SignerOpts",
		},
	},
	{
		path: "errors",
	},
	{
		path: "expvar",
		names: []string{
			"Func",
			"Var",
		},
	},
	{
		path: "go/ast",
		names: []string{
			"Decl",
			"Expr",
			"FieldFilter",
			"Filter",
			"Importer",
			"Node",
			"Spec",
			"Stmt",
			"Visitor",
		},
	},
	{
		path: "go/doc",
		names: []string{
			"Filter",
		},
	},
	{
		path: "regexp",
		names: []string{
			"input",
		},
	},
	{
		path: "net/rpc",
		names: []string{
			"ClientCodec",
			"ServerCodec",
		},
	},
	{
		path: "net/url",
	},
	{
		path: "os/exec",
	},
	{
		path: "os/user",
	},
	{
		path: "reflect",
		names: []string{
			"Type",
		},
	},
	{
		path: "runtime",
		names: []string{
			"Error",
		},
	},
	{
		path: "strconv",
	},
	{
		path: "strings",
		names: []string{
			"replacer",
		},
	},
	{
		path: "syscall",
		names: []string{
			"Sockaddr",
		},
	},
	{
		path: "testing",
		names: []string{
			"TB",
		},
	},
	{
		path: "unicode",
	},
	{
		path: "debug/pe",
	},
	{
		path: "encoding",
		names: []string{
			"BinaryMarshaler",
			"BinaryUnmarshaler",
			"TextMarshaler",
			"TextUnmarshaler",
		},
	},
	{
		path: "go/build",
	},
	{
		path: "go/token",
	},
	{
		path: "go/types",
		names: []string{
			"Importer",
			"Object",
			"Qualifier",
			"Sizes",
			"Type",
			"getter",
		},
	},
	{
		path: "hash/fnv",
	},
	{
		path: "math/big",
	},
	{
		path: "net/http",
		names: []string{
			"CloseNotifier",
			"CookieJar",
			"File",
			"FileSystem",
			"Flusher",
			"Handler",
			"HandlerFunc",
			"Hijacker",
			"ResponseWriter",
			"RoundTripper",
		},
	},
	{
		path: "net/mail",
	},
	{
		path: "net/smtp",
		names: []string{
			"Auth",
		},
	},
	{
		path: "debug/elf",
	},
	{
		path: "go/format",
	},
	{
		path: "go/parser",
	},
	{
		path: "image/gif",
	},
	{
		path: "image/png",
	},
	{
		path: "io/ioutil",
	},
	{
		path: "math/rand",
		names: []string{
			"Source",
		},
	},
	{
		path: "os/signal",
	},
	{
		path: "crypto/aes",
	},
	{
		path: "crypto/des",
	},
	{
		path: "crypto/dsa",
	},
	{
		path: "crypto/md5",
	},
	{
		path: "crypto/rc4",
	},
	{
		path: "crypto/rsa",
	},
	{
		path: "crypto/tls",
		names: []string{
			"ClientSessionCache",
			"macFunction",
		},
	},
	{
		path: "go/printer",
	},
	{
		path: "go/scanner",
		names: []string{
			"ErrorHandler",
		},
	},
	{
		path: "hash/crc32",
	},
	{
		path: "hash/crc64",
	},
	{
		path: "image/draw",
		names: []string{
			"Drawer",
			"Image",
			"Quantizer",
		},
	},
	{
		path: "image/jpeg",
		names: []string{
			"Reader",
		},
	},
	{
		path: "log/syslog",
		names: []string{
			"serverConn",
		},
	},
	{
		path: "math/cmplx",
	},
	{
		path: "archive/tar",
		names: []string{
			"numBytesReader",
		},
	},
	{
		path: "archive/zip",
		names: []string{
			"Compressor",
			"Decompressor",
		},
	},
	{
		path: "crypto/hmac",
	},
	{
		path: "crypto/rand",
	},
	{
		path: "crypto/sha1",
	},
	{
		path: "crypto/x509",
	},
	{
		path: "debug/dwarf",
		names: []string{
			"Type",
			"dataFormat",
			"typeReader",
		},
	},
	{
		path: "debug/gosym",
	},
	{
		path: "debug/macho",
		names: []string{
			"Load",
		},
	},
	{
		path: "go/constant",
		names: []string{
			"Value",
		},
	},
	{
		path: "go/importer",
		names: []string{
			"Lookup",
		},
	},
	{
		path: "image/color",
		names: []string{
			"Color",
			"Model",
		},
	},
	{
		path: "runtime/cgo",
	},
	{
		path: "sync/atomic",
	},
	{
		path: "compress/lzw",
	},
	{
		path: "crypto/ecdsa",
	},
	{
		path: "database/sql",
		names: []string{
			"Result",
			"Scanner",
			"finalCloser",
		},
	},
	{
		path: "encoding/csv",
	},
	{
		path: "encoding/gob",
		names: []string{
			"GobDecoder",
			"GobEncoder",
			"decHelper",
			"decOp",
			"encHelper",
			"encOp",
			"gobType",
		},
	},
	{
		path: "encoding/hex",
	},
	{
		path: "encoding/pem",
	},
	{
		path: "encoding/xml",
		names: []string{
			"Marshaler",
			"MarshalerAttr",
			"Unmarshaler",
			"UnmarshalerAttr",
		},
	},
	{
		path: "hash/adler32",
	},
	{
		path: "net/http/cgi",
	},
	{
		path: "runtime/race",
	},
	{
		path: "text/scanner",
	},
	{
		path: "unicode/utf8",
	},
	{
		path: "compress/gzip",
	},
	{
		path: "compress/zlib",
		names: []string{
			"Resetter",
		},
	},
	{
		path: "crypto/cipher",
		names: []string{
			"AEAD",
			"Block",
			"BlockMode",
			"Stream",
		},
	},
	{
		path: "crypto/sha256",
	},
	{
		path: "crypto/sha512",
	},
	{
		path: "crypto/subtle",
	},
	{
		path: "encoding/asn1",
	},
	{
		path: "encoding/json",
		names: []string{
			"Marshaler",
			"Unmarshaler",
		},
	},
	{
		path: "html/template",
	},
	{
		path: "net/http/fcgi",
	},
	{
		path: "net/textproto",
	},
	{
		path: "path/filepath",
		names: []string{
			"WalkFunc",
		},
	},
	{
		path: "regexp/syntax",
	},
	{
		path: "runtime/debug",
	},
	{
		path: "runtime/pprof",
	},
	{
		path: "runtime/trace",
	},
	{
		path: "testing/quick",
		names: []string{
			"Generator",
		},
	},
	{
		path: "text/template",
	},
	{
		path: "unicode/utf16",
	},
	{
		path: "compress/bzip2",
	},
	{
		path: "compress/flate",
		names: []string{
			"Reader",
			"Resetter",
		},
	},
	{
		path: "container/heap",
		names: []string{
			"Interface",
		},
	},
	{
		path: "container/list",
	},
	{
		path: "container/ring",
	},
	{
		path: "debug/plan9obj",
	},
	{
		path: "mime/multipart",
		names: []string{
			"File",
		},
	},
	{
		path: "net/http/pprof",
	},
	{
		path: "testing/iotest",
	},
	{
		path: "text/tabwriter",
	},
	{
		path: "crypto/elliptic",
		names: []string{
			"Curve",
		},
	},
	{
		path: "encoding/base32",
	},
	{
		path: "encoding/base64",
	},
	{
		path: "encoding/binary",
		names: []string{
			"ByteOrder",
		},
	},
	{
		path: "net/rpc/jsonrpc",
	},
	{
		path: "crypto/x509/pkix",
	},
	{
		path: "encoding/ascii85",
	},
	{
		path: "index/suffixarray",
	},
	{
		path: "net/http/httptest",
	},
	{
		path: "net/http/httputil",
	},
	{
		path: "net/http/cookiejar",
		names: []string{
			"PublicSuffixList",
		},
	},
	{
		path: "database/sql/driver",
		names: []string{
			"ColumnConverter",
			"Conn",
			"Driver",
			"Execer",
			"Queryer",
			"Result",
			"Rows",
			"Stmt",
			"Tx",
			"ValueConverter",
			"Valuer",
		},
	},
	{
		path: "image/color/palette",
	},
	{
		path: "text/template/parse",
		names: []string{
			"Node",
			"stateFn",
		},
	},
	{
		path: "mime/quotedprintable",
	},
}
